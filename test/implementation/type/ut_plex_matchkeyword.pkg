CREATE OR REPLACE PACKAGE ut_plex_matchKeyword AS
    --%suitepath(plex)
    --%suite(plex_matchKeyword);

    --%test(if keyword matched even as substring if allowedAsSubstring (default))
    PROCEDURE keywordPrefixNotIngored(D VARCHAR2 := 'if keyword matched even as substring if allowedAsSubstring (default)');
    
    --%test(if keyword not matched if not allowedAsSubstring)   
    PROCEDURE keywordPrefixIngored(D VARCHAR2 := 'if keyword not matched if not allowedAsSubstring');
    
    --%test(if keyword not matched if not allowedAsSubstring - _#$ are not special characters delimiting keywords)
    PROCEDURE keywordPrefixIngored2(D VARCHAR2 := 'if keyword not matched if not allowedAsSubstring - _#$ are not special characters delimiting keywords');
    
    --%test(keyword is matched if delimited by space, special or eof)
    PROCEDURE keywordMatchIfDelimited(D VARCHAR2 := 'keyword is matched if delimited by space, special or eof');

END;
/
CREATE OR REPLACE PACKAGE BODY ut_plex_matchKeyword AS
    ----------------------------------------------------------------------------
    PROCEDURE keywordPrefixNotIngored(D VARCHAR2) IS
        l_Text         VARCHAR2(30) := '.Test';
        l_sourceLines  plex.source_lines_type := plex.source_lines_type(l_Text);
        l_match        plex_matchKeyword := plex_matchKeyword(plex.tk_Dot, plex.tk_Dot);
        l_matchWord    plex_matchWord := plex_matchWord();
        l_matchedToken plex_token;
    BEGIN
        -- prepare
        plex_lexer.initialize(l_sourceLines);
        --
        l_matchedToken := l_match.isMatch;
        --
        -- Expectations
        ut.expect(plex.tk_Dot,'. is matched even as a prefix').to_equal(l_matchedToken.tokenType);
        -- word Test is matched
        l_matchedToken := l_matchWord.isMatch;
        --
        -- Expectations
        ut.expect(plex.tk_Word).to_equal(l_matchedToken.tokenType);
        ut.expect(l_matchedToken.text).to_equal('Test');
        ut.expect(plex_lexer.eof).be_true();
    END;

    ----------------------------------------------------------------------------
    PROCEDURE keywordPrefixIngored(D VARCHAR2) IS
        l_Text         VARCHAR2(30) := 'functionTest';
        l_sourceLines  plex.source_lines_type := plex.source_lines_type(l_Text);
        l_match        plex_matchKeyword := plex_matchKeyword(plex.tk_FUNCTION, plex.tk_FUNCTION, 'N');
        l_matchWord    plex_matchWord := plex_matchWord();
        l_matchedToken plex_token;
    BEGIN
        -- prepare
        plex_lexer.initialize(l_sourceLines);
        -- Test
        l_matchedToken := l_match.isMatch;
        --
        -- Expectations
        ut.expect(l_matchedToken,'function keyword is not matched as prefix').to_be_null();
        -- Test 
        l_matchedToken := l_matchWord.isMatch;
        --
        -- Expectations
        ut.expect(plex.tk_Word,'word functionTest is matched').to_equal(l_matchedToken.tokenType);
        ut.expect(l_Text).to_equal(l_matchedToken.text);
        ut.expect(plex_lexer.eof).be_true();
    END;

    ----------------------------------------------------------------------------
    PROCEDURE keywordPrefixIngored2(D VARCHAR2) IS
        l_Text         VARCHAR2(30) := 'function_Test';
        l_sourceLines  plex.source_lines_type := plex.source_lines_type(l_Text);
        l_match        plex_matchKeyword := plex_matchKeyword(plex.tk_FUNCTION, plex.tk_FUNCTION, 'N');
        l_matchWord    plex_matchWord := plex_matchWord();
        l_matchedToken plex_token;
    BEGIN
        -- prepare
        plex_lexer.initialize(l_sourceLines);
        -- Test
        l_matchedToken := l_match.isMatch;
        --
        -- Expectations
        ut.expect(l_matchedToken,'function keyword is not matched as prefix').to_be_null();
        -- Test
        -- word functionTest is matched
        --
        -- Expectations
        ut.expect(plex.tk_Word,'word functionTest is matched').to_equal(l_matchedToken.tokenType);
        ut.expect(l_Text).to_equal(l_matchedToken.text);
        ut.expect(plex_lexer.eof).be_true();
    END;

    ----------------------------------------------------------------------------
    PROCEDURE keywordMatchIfDelimited(D VARCHAR2) IS
        l_Text            VARCHAR2(255) := 'function.funcTion FUNCtion';
        l_sourceLines     plex.source_lines_type := plex.source_lines_type(l_Text);
        l_match           plex_matchKeyword := plex_matchKeyword(plex.tk_FUNCTION, plex.tk_FUNCTION, 'N');
        l_matchDot        plex_matchKeyword := plex_matchKeyword(plex.tk_Dot, plex.tk_Dot);
        l_matchWhiteSpace plex_matchWhiteSpace := plex_matchWhiteSpace();
        l_matchedToken    plex_token;
    BEGIN
        -- prepare
        plex_lexer.initialize(l_sourceLines);
        -- Test
        l_matchedToken := l_match.isMatch;
        --
        -- Expectations
        ut.expect(plex.tk_FUNCTION).to_equal(l_matchedToken.tokenType);
        ut.expect(l_matchedToken.text).to_equal('function');
        -- Test
        l_matchedToken := l_match.isMatch;
        --
        -- Expectations
        ut.expect(plex.tk_Dot).to_equal(l_matchedToken.tokenType);
        ut.expect(l_matchedToken.text).to_equal('.');
        -- Test
        l_matchedToken := l_match.isMatch;
        --
        -- Expectations
        ut.expect(plex.tk_FUNCTION).to_equal(l_matchedToken.tokenType);
        ut.expect(l_matchedToken.text).to_equal('funcTion');
        -- Test
        l_matchedToken := l_matchWhiteSpace.isMatch;
        --
        -- Expectations
        ut.expect(plex.tk_WhiteSpace).to_equal(l_matchedToken.tokenType);
        -- Test
        l_matchedToken := l_match.isMatch;
        --
        -- Expectations
        ut.expect(plex.tk_FUNCTION).to_equal(l_matchedToken.tokenType);
        ut.expect(l_matchedToken.text).to_equal('FUNCtion');
        --
        ut.expect(plex_lexer.eof).be_true();
    END;

END;
/
