create or replace PACKAGE ut_plex_matchWord AS

    --%suitepath(plex)
    --%suite(plex_matchWord)

    --%test(matches word delimited by special characters, whitespace or EOF)
    PROCEDURE delimited;

    --%test(matches word enquoted by ")
    PROCEDURE enquoted;

END;
/
CREATE OR REPLACE PACKAGE BODY ut_plex_matchWord AS

    ----------------------------------------------------------------------------
    PROCEDURE delimited IS
        l_Text            VARCHAR2(255) := 'delimitedBySpecial.delimitedByWhiteSpace delimitedByEOF';
        l_sourceLines     plex.source_lines_type := plex.source_lines_type(l_Text);
        l_match           plex_matchWord := plex_matchWord();
        l_matchWhiteSpace plex_matchWhiteSpace := plex_matchWhiteSpace();
        l_matchDot        plex_matchKeyword := plex_matchKeyword(plex.tk_Dot, plex.tk_Dot);
        l_matchedToken    plex_token;
    BEGIN
        -- Prepare
        plex_lexer.initialize(p_source_lines => l_sourceLines);
        --
        -- Test
        l_matchedToken := l_match.isMatch;
        --
        -- Expectations
        ut.expect(l_matchedToken.tokenType).to_equal(plex.tk_Word);
        ut.expect(l_matchedToken.text).to_equal('delimitedBySpecial');
        --
        l_matchedToken := l_matchDot.isMatch;
        --
        -- Expectations
        ut.expect(l_matchedToken.tokenType).to_equal(plex.tk_Dot);
        ut.expect(l_matchedToken.text).to_equal('.');
        --
        -- Continue Test
        l_matchedToken := l_match.isMatch;
        --
        -- Expectations
        ut.expect(l_matchedToken.tokenType).to_equal(plex.tk_Word);
        ut.expect(l_matchedToken.text).to_equal('delimitedByWhiteSpace');
        --
        -- Continue Test
        l_matchedToken := l_matchWhiteSpace.isMatch;
        --
        -- Expectations
        ut.expect(l_matchedToken.tokenType).to_equal(plex.tk_WhiteSpace);
        --
        -- Continue Test
        l_matchedToken := l_match.isMatch;
        --
        -- Expectations
        ut.expect(l_matchedToken.tokenType).to_equal(plex.tk_Word);
        ut.expect(l_matchedToken.text).to_equal('delimitedByEOF');
        --
        ut.expect(plex_lexer.eof,'only EOF is left').to_be_true();
    END;
    ----------------------------------------------------------------------------
    PROCEDURE enquoted IS
        l_Text         VARCHAR2(255) := q'["w=o%r'd"]';
        l_sourceLines  plex.source_lines_type := plex.source_lines_type(l_Text);
        l_match        plex_matchWord := plex_matchWord();
        l_matchedToken plex_token;
    BEGIN
        -- Prepare
        plex_lexer.initialize(p_source_lines => l_sourceLines);
        --
        -- Test
        l_matchedToken := l_match.isMatch;
        --
        -- Expectations
        ut.expect(l_matchedToken.tokenType).to_equal(plex.tk_Word);
        ut.expect(l_matchedToken.text).to_equal(l_Text);
        --
        ut.expect(plex_lexer.eof,'only EOF is left').to_be_true();
    END;

END;
/
