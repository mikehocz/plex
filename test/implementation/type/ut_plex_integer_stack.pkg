CREATE OR REPLACE PACKAGE ut_plex_integer_stack AS

    --%suitepath(plex)
    --%suite(Plex_Integer_Stack)

    --%test(push pushes, pop pops - stack works)
    PROCEDURE pushPushesPopPops(D VARCHAR2 := 'push pushes, pop pops - stack works');
    
    --%test(pop has procedure overload)
    PROCEDURE popAsProcedure(D VARCHAR2 := 'pop has procedure overload');
    
    --%test(pop from empty throws)
    --%throws(-20000)
    PROCEDURE popFromEmptyThrows(D VARCHAR2 := 'pop from empty throws');

END;
/
CREATE OR REPLACE PACKAGE BODY ut_plex_integer_stack AS

    ----------------------------------------------------------------------------
    PROCEDURE pushPushesPopPops(D VARCHAR2) IS
        l_stack plex_integer_stack := plex_integer_stack();
    BEGIN
        -- prepare
        ut.expect(l_stack.isEmtpy).to_equal(1);
        -- Test
        l_stack.push(1);
        --
        -- Expectations
        ut.expect(l_stack.pop).to_equal(1);
        ut.expect(l_stack.isEmtpy).to_equal(1);
        -- Test
        l_stack.push(2);
        --
        -- Expectations
        ut.expect(l_stack.pop).to_equal(2);
        -- Test
        l_stack.push(3);
        --
        -- Expectations
        ut.expect(l_stack.pop).to_equal(3);
        ut.expect(l_stack.isEmtpy).to_equal(1);
        --
    END;

    ----------------------------------------------------------------------------
    PROCEDURE popAsProcedure(D VARCHAR2) IS
        l_stack plex_integer_stack := plex_integer_stack();
    BEGIN
        -- Test
        l_stack.push(1);
        l_stack.pop;
        --
        -- Expectations
        t.expect(l_stack.isEmtpy).to_equal(1);
    END;

    ----------------------------------------------------------------------------
    PROCEDURE popFromEmptyThrows(D VARCHAR2) IS
        l_stack  plex_integer_stack := plex_integer_stack();
        l_thrown BOOLEAN := FALSE;
    BEGIN
        -- Test
        l_stack.pop;
        --
    END;

END;
/
